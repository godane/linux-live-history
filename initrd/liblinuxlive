../tools/liblinuxlivesole >dev/console 2>&1
' >>/mnt/$LINUXINIT

mount -o remount,ro /mnt
cd /mnt

$DEBUG

echo "changing root directory..."
/sbin/pivot_root . mnt/ramdisk
exec /usr/bin/chroot . $LINUXINIT <dev/console >dev/console 2>&1

header "ERROR!"
echo "You are not supposed to be here, something went wrong!"
echo "calling /mnt/usr/bin/chroot failed?"
echo "Press Ctrl+Alt+Del for reboot."
while [ 1 = 1 ]; do bash; done
entered wrong fromhd= parameter?"
  echo "Press Ctrl+Alt+Del for reboot."
  while [ 1 = 1 ]; do bash; done
fi

echo "liveCD found in $LIVECD_PATH"
mkdir -p $LIVECDDATA $IMGRO $IMGRW $CP2RAM $CHANGES

echo -n "copying selected modules to RAM... "

# base
ls -aA1b "$LIVECD_PATH/base" 2>/dev/null | while read IMG; do
   echo "`cp2ram \"$LIVECD_PATH/base/$IMG\" \"$CP2RAM\"`" >>$MNTORDER
done

# modules
ls -aA1b "$LIVECD_PATH/modules" 2>/dev/null | while read IMG; do
   echo "`cp2ram \"$LIVECD_PATH/modules/$IMG\" \"$CP2RAM\"`" >>$MNTORDER
done

# optional modules (insert only modules specified by load= kernel boot parameter)
cmdline_value load | tr "," "\\n" | while read IMG; do
   ls -aA1b "$LIVECD_PATH/optional/$IMG"* 2>/dev/null | while read IMAGE; do
         echo "`cp2ram \"$IMAGE\" \"$CP2RAM\"`" >>$MNTORDER
   done
done
echo

echo -n "unpacking .tar.gz from the CD... "
ls -aA1b $LIVECD_PATH/packs | while read PACK;
do
   echo -n "$PACK "
   tar -C /mnt -xzmf "$LIVECD_PATH/packs/$PACK"
done
echo

echo -n "mounting all images... "
cat $MNTORDER | while read IMG;
do
   echo -n "`basename \" $IMG\"` "
   mount_img $IMG $IMGRO $INSORDER -n
done
echo

$DEBUG

header "creating live filesystem"

echo "Starting ovlfs support (by Arthur Naseef)"
modprobe_module ovl
mount -t ovl cdrom_ovl $IMGRW -o root=$IMGRO,storage=$CHANGES,stg_file=$STGFILE

if [ ! "$?" = "0" ]; then
  header "ERROR!"
  echo "cannot overmount cdrom in pseudo-write mode."
  echo "Maybe your kernel doesn't support ovlfs?"
  echo "Press Ctrl+Alt+Del for reboot."
  while [ 1 = 1 ]; do bash; done
fi

echo -n "inserting images into filesystem... "
cat $INSORDER | while read IMG;
do
   IMG=$IMGRW/${IMG:${#IMGRO}}
   echo -n "`basename \"$IMG\"` "
   if [ -x $IMG/preinsert ]; then $IMG/preinsert; fi
   make_links $IMG/data /mnt /mnt
   if [ -x $IMG/postinsert ]; then $IMG/postinsert; fi
done
echo

$DEBUG

if [ ! "`cmdline_parameter eject`" = "" ]; then
   echo "trying to eject LiveCD medium..."
   eject "$LIVECD_MOUNT" >/dev/null 2>/dev/null
   if [ ! "$?" = 0 ]; then
      echo "error, cdrom cannot be unmounted or doesn't support ejecting"
   fi
else
   mount --rbind $LIVECD_PATH /mnt/boot
fi

echo "exporting LIVECD variables to profile.d..."

echo "export LIVECD_MOUNT="${LIVECD_MOUNT:4} >/mnt/etc/profile.d/slax.sh
echo "export LIVECD_PATH="${LIVECD_PATH:4} >>/mnt/etc/profile.d/slax.sh
chmod 755 /mnt/etc/profile.d/slax.sh
echo "setenv LIVECD_MOUNT "${LIVECD_MOUNT:4} >/mnt/etc/profile.d/slax.csh
echo "setenv LIVECD_PATH "${LIVECD_PATH:4} >>/mnt/etc/profile.d/slax.csh
chmod 755 /mnt/etc/profile.d/slax.csh

echo "creating fstab..."

echo "tmpfs /     tmpfs defaults 0 0" >/mnt/etc/fstab
echo "proc  /proc proc  defaults 0 0" >>/mnt/etc/fstab

cat $MOUNTS | while read DEVICE; do
   LINE="`cat /proc/mounts | egrep \"^$DEVICE[[:space:]]\"`"
   if [ "$LINE" = "" ]; then continue; fi

   umount "$DEVICE" 1>/dev/null 2>/dev/null
   if [ "$?" = 0 ]; then
      LINERO=${LINE/ \/mnt/ }
      LINEDEF=${LINERO/ ro / defaults }
      echo $LINEDEF >>/mnt/etc/fstab
   fi
done

list_swaps >>/mnt/etc/fstab

echo >/mnt/etc/mtab
touch -t 197001010000.00 /mnt/etc/modules.conf # to avoid error messages

N­‰· "creatiÖ›‰·nit script iˆ