#!/bin/ash

# Functions library :: for Linux Live scripts 5.x.y
# Author: Tomas M. <http://www.linux-live.org>
#

# ===========================================================
# user interface functions
# ===========================================================

# echolog
# $1 = text to show and to write to /var/log/messages
#
echolog()
{
   echo "LIVECD:" "$@" >>/var/log/livedbg
   echo "$@"
}

# debug
# commands executed when debug boot parameter is present
#
debug()
{
   echo
   echo "====="
   echo ": Debugging started. Here is the root shell for you."
   echo ": Type your desired command or hit Ctrl+D to continue booting."
   echo
   ash
}

# header
# $1 = text to show
#
header()
{
   echolog "[0;1m$1[0;0m"
}

fatal()
{
   header "Fatal error occured - $1"
   echolog "Something went wrong and we can't continue booting."
   echolog "You may explore the system by using simple commands like ls, lsmod, mount, etc."
   echolog "Finaly hit Ctrl+Alt+Delete to reboot."
   echolog
   ash
}

# ===========================================================
# text processing functions
# ===========================================================

# egrep_o is a replacement for "egrep -o". It prints only the last
# matching text
# $1 = regular expression
#
egrep_o()
{
   cat | egrep "$1" | sed -r "s/.*($1).*/\\1/"
}

# look into cmdline and echo $1 back if $1 is set
# $1 = value name, case sensitive, for example livecd_subdir
# $2 = file to use instead /proc/cmdline, optional
#
cmdline_parameter()
{
   CMDLINE=/proc/cmdline
   if [ "$2" != "" ]; then CMDLINE="$2"; fi
   cat "$CMDLINE" | egrep_o "(^|[[:space:]]+)$1(\$|=|[[:space:]]+)" | egrep_o "$1"
}

# look into cmdline and echo value of $1 option
# $1 = value name, case sensitive, for example livecd_subdir
# $2 = file to use instead /proc/cmdline, optional
#
cmdline_value()
{
   CMDLINE=/proc/cmdline
   if [ "$2" != "" ]; then CMDLINE="$2"; fi
   cat "$CMDLINE" | egrep_o "(^|[[:space:]]+)$1=([^[:space:]]+)" | egrep_o "=.*" | cut -b 2- | tail -n 1
}

# ===========================================================
# system functions
# ===========================================================

# modprobe module $1, including all dependencies, suppress all messages
# (own function because modprobe in busybox doesn't work with gzipped modules)
# $1 = module name, eg. ehci-hcd
# $2 = optional argument
#
modprobe_module()
{
  PRINTK=`cat /proc/sys/kernel/printk`
  echo "0" >/proc/sys/kernel/printk

  KERNEL="`uname -r`"; LSMOD=/tmp/lsmod
  MODULEDEPS="`cat /lib/modules/$KERNEL/modules.dep | egrep \"$1\\.ko(\\.gz)?:\"`"

  for MODULE in `echo $MODULEDEPS | cut -d ":" -f 2-` `echo $MODULEDEPS | cut -d ":" -f 1`; do
     TMPMOD="/tmp/`basename $MODULE .gz`";
     # if the module is not loaded already
     if [ "`cat $LSMOD 2>/dev/null | egrep \"^$TMPMOD\\\$\"`" = "" ]; then
        gunzip -c $MODULE 2>/dev/null >$TMPMOD
        if [ "$?" -ne 0 ]; then cp $MODULE $TMPMOD; fi # can't gunzip? copy
        insmod $TMPMOD $2 >/dev/null 2>/dev/null; err=$?
        if [ "$err" -eq 0 ]; then echo $TMPMOD >>$LSMOD; fi
        rm $TMPMOD
     fi
  done

  echo "$PRINTK" >/proc/sys/kernel/printk
  return $err
}

# Mount device $1 to $2
# $1 = /dev device to mount, eg. /dev/hda1
# $2 = mountpoint, eg. /mnt/hda1
# $3 = mount options, for example "loop", "ro", or "remount,rw"
#
mount_device()
{
  mkdir -p $2
  if [ "$3" != "" ]; then OPTIONS="-o $3"; else OPTIONS=""; fi

  PRINTK=`cat /proc/sys/kernel/printk`
  echo "0" >/proc/sys/kernel/printk

  mount -t auto $1 $2 $OPTIONS >/dev/null 2>/dev/null
  err=$?

  if [ "$err" -ne 0 ]; then rmdir $2 2>/dev/null; fi
  echo "$PRINTK" >/proc/sys/kernel/printk
  return $err
}

# ===========================================================
# live module functions
# ===========================================================

# Create module
# call mksquashfs with apropriate arguments
# $1 = directory which will be compressed to squashfs module
# $2 = output .mo file
# $3 = optional -keep-as-directory argument
#
create_module()
{
   mksquashfs $1 $2 $3 >/dev/null
   if [ $? -ne 0 ]; then return 1; fi
   chmod oga-x $2 # remove execute attrib
}

# Mount .mo module to destination directory
# $1 = path to .mo livecd compressed module
# $2 = destination folder
#
mount_module()
{
   mount -t squashfs -o loop,ro $1 $2
}

# Insert a directory tree $2 to an union specified by $1
# Top-level read-write branch is specified by it's index 0
# $1 = union absolute path (starting with /)
# $2 = path to data directory
#
union_insert_dir()
{
   unionctl $1 --add --after 0 --mode ro $2
}

# List all modules in all directories (base, modules, optional)
# and filter out unneeded optional modules (not specified by load= kernel parameter)
# $1 = root directory of mounted DATAdir
#
list_modules()
{
   LOAD="`cmdline_value load`"
   ls -A1d $1/*.mo $1/*/*.mo 2>/dev/null | while read LINE; do
      MODNAME="`basename $LINE .mo`"
      if [ "$LOAD" != "*" -a "`echo $LINE | grep optional`" != "" -a "`echo $LOAD | egrep \"(^|,)$MODNAME(\\\$|,)\"`" = "" ]; then continue
        else echo $LINE; fi
   done
}

# Insert all .mo modules, in $2 directory and subdirectories, to the union
# $1 = union absolute path (starting with /)
# $2 = LiveCD data dir (with directories /base, /modules, etc.)
# $3 = destination folder, where images will be mounted to
#
union_insert_modules()
{
   list_modules $2 | while read MODULE; do
      TARGET="$3/`basename $MODULE`"
      while [ -e $TARGET ]; do TARGET=$TARGET.X; done
      mkdir -p $TARGET
      mount_module $MODULE $TARGET
      union_insert_dir $1 $TARGET
   done
}

# Copy modules to RAM directory
# $1 = data directory
# $2 = target directory in RAM
#
copy_modules()
{
   list_modules $1 | while read MODULE; do
      RELATIVE=${MODULE#$1}
      DIR="`dirname $RELATIVE`"
      mkdir -p $2/$DIR
      cp $MODULE $2/$RELATIVE
      if [ "$?" -ne 0 ]; then fatal "not enough memory to copy modules to RAM"; fi
   done
}

# ===========================================================
# discovery functions
# ===========================================================

# List all CD-ROMs
# by using /proc entries
#
list_cdrom_devices()
{
   for CDDEVICE in `cat /proc/sys/dev/cdrom/info | head -n 3 | tail -n 1 | cut -d ":" -f 2`; do
      echo "/dev/$CDDEVICE"
   done
}

# List all partition devices
# take list of all partitions and output unique disks
#
list_partition_devices()
{
   if [ "`cmdline_parameter nohd`" != "" ]; then return 1; fi
   cat /proc/partitions | grep -v loop | sed -r "s/^[0-9[:space:]]+/\/dev\//" | grep /dev/
}

# List all disk devices
#
list_disk_devices()
{
   list_partition_devices | egrep -v "[0-9]"
}

# List all block devices
#
list_block_devices()
{
   list_cdrom_devices
   list_partition_devices
}

# Try to mount all disks, partitions and cdroms and Find where the LiveCD is.
# If LiveCD found in the device, echo dirname of it's directory
# and leave the device mounted.
# $1 = directory where devices will be mounted
#
find_live_data_dir()
{
   list_block_devices | while read DEVICE; do
      DIR=$1/"`basename $DEVICE`"
      mount_device $DEVICE $DIR
      ls -A1d $DIR/livecd.sgn $DIR/*/livecd.sgn 2>/dev/null | \
        while read FOUND; do dirname "$FOUND"; return 1; done
      if [ "$?" -eq 0 ]; then umount $DIR 2>/dev/null; rmdir $DIR 2>/dev/null
      else return 0; fi
   done
}

# ===========================================================
# hardware preparation functions
# ===========================================================

# Create block devices to /dev described by /sys entries
#
create_block_devices()
{
   echolog "creating /dev entries for block devices"
   ls -A1d /sys/block/*/dev /sys/block/*/*/dev 2>/dev/null | grep -v loop | while read BLOCK; do
      DEVICE="/dev/`basename \`dirname $BLOCK\``"
      if [ ! -b $DEVICE ]; then
         MINORMAJOR="`head -n 1 $BLOCK | tr ':' ' '`"
         mknod $DEVICE b $MINORMAJOR
      fi
   done
}

# modprobe kernel modules needed for the LiveCD
#
modprobe_essential_modules()
{
   echolog "starting loop device support"
   modprobe_module loop max_loop=256
   echolog "starting cdrom filesystem support"
   modprobe_module isofs
   echolog "starting squashfs support"
   modprobe_module squashfs
   echolog "starting unionfs support"
   modprobe_module unionfs
   create_block_devices
}

# modprobe kernel modules needed for USB masstorage devices
#
modprobe_usb_modules()
{
   echolog "starting USB support, this may take a while"
   modprobe_module usb-storage
   modprobe_module ehci-hcd
   modprobe_module ohci-hcd
   modprobe_module uhci-hcd
   create_block_devices
}

# modprobe kernel modules needed for SCSI disks
#
modprobe_scsi_modules()
{
   echolog "starting SCSI support, this may take a while"
   ls /lib/modules/`uname -r`/kernel/drivers/scsi | cut -d . -f 1 | while read MODULE; do
      if [ "$MODULE" != "sg" -a "$MODULE" != "scsi_debug" ]; then
         echolog "$MODULE..."
	 modprobe_module $MODULE
      fi
   done
   create_block_devices
}

# Enable/disable DMA if nodma boot parameter is present
#
setup_dma()
{
   if [ "`cmdline_parameter nodma`" = "" ]; then USINGDMA=1; else USINGDMA=0; fi
   for DEVICE in `list_cdrom_devices` `list_disk_devices`; do
      echolog "setting DMA support for $DEVICE =using_dma:$USINGDMA"
      echo "using_dma:$USINGDMA" >"/proc/ide/`basename $DEVICE`/settings"
   done
}

# create correct fstab file in $1/etc/fstab and create apropriate
# mount directories in $1
# $1 = root directory (union)
#
activate_fstab()
{
   mkdir -p $1/etc
   FSTAB="$1/etc/fstab"
   echo "tmpfs            /                tmpfs       defaults         0   0" >$FSTAB
   echo "devpts           /dev/pts         devpts      gid=5,mode=620   0   0" >>$FSTAB
   echo "proc             /proc            proc        defaults         0   0" >>$FSTAB

   list_block_devices | while read DEVICE; do
      MOUNTDIR="/mnt/`basename $DEVICE`"
      echo "$DEVICE $MOUNTDIR auto defaults,noauto 0 0" >>$FSTAB
      mkdir -p $1/$MOUNTDIR
   done

   fdisk -l 2>/dev/null | grep -i "Linux swap" | egrep "^/dev/" \
     | cut -f 1 -d " " | sed -r "s/(.+)/\\1 swap swap defaults 0 0/" >>$FSTAB
}
