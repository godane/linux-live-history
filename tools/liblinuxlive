#!/bin/ash

# Functions library :: for Linux Live scripts 5.x.y
# Author: Tomas M. <http://www.linux-live.org>
#

# ===========================================================
# variables
# ===========================================================

# linux live flag to fstab, if fstab line doesn't contain it,
# never remove it from fstab automatically (user added it)
FSTABLLFLAG="# allow autochange"

# ===========================================================
# user interface functions
# ===========================================================

# echolog
# $1 = text to show and to write to /var/log/messages
#
echolog()
{
   echo "LIVECD:" "$@" >>/var/log/livedbg
   echo "$@"
}

# debug
# commands executed when debug boot parameter is present
#
debug()
{
   echo
   echo "====="
   echo ": Debugging started. Here is the root shell for you."
   echo ": Type your desired command or hit Ctrl+D to continue booting."
   echo
   ash
}

# header
# $1 = text to show
#
header()
{
   echolog "[0;1m$1[0;0m"
}

fatal()
{
   header "Fatal error occured - $1"
   echolog "Something went wrong and we can't continue. This should never happen."
   echolog "Please explore the system by using simple commands like mount or dmesg"
   echolog "and if you found how to fix the bug, let me know at bugs@linux-live.org."
   echolog "This way we can make linux live scripts even better. Thank you."
   echolog "If you hit Ctrl+D now, the booting will continue. But use at your own risk."
   echolog "To be safe, hit Ctrl+Alt+Delete to reboot."
   echolog
   ash
}

allow_only_root()
{
  # test if the script is started by root user. If not, exit
  if [ "0$UID" -ne 0 ]; then
     echo "Only root can run `basename $0`"; exit 1
  fi
}

# ===========================================================
# text processing functions
# ===========================================================

# egrep_o is a replacement for "egrep -o". It prints only the last
# matching text
# $1 = regular expression
#
egrep_o()
{
   cat | egrep "$1" | sed -r "s/.*($1).*/\\1/"
}

# look into cmdline and echo $1 back if $1 is set
# $1 = value name, case sensitive, for example livecd_subdir
# $2 = file to use instead /proc/cmdline, optional
#
cmdline_parameter()
{
   CMDLINE=/proc/cmdline
   if [ "$2" != "" ]; then CMDLINE="$2"; fi
   cat "$CMDLINE" | egrep_o "(^|[[:space:]]+)$1(\$|=|[[:space:]]+)" | egrep_o "$1"
}

# look into cmdline and echo value of $1 option
# $1 = value name, case sensitive, for example livecd_subdir
# $2 = file to use instead /proc/cmdline, optional
#
cmdline_value()
{
   CMDLINE=/proc/cmdline
   if [ "$2" != "" ]; then CMDLINE="$2"; fi
   cat "$CMDLINE" | egrep_o "(^|[[:space:]]+)$1=([^[:space:]]+)" | egrep_o "=.*" | cut -b 2- | tail -n 1
}

# ===========================================================
# system functions
# ===========================================================

# modprobe module $1, including all dependencies, suppress all messages
# (own function because modprobe in busybox doesn't work with gzipped modules)
# $1 = module name, eg. ehci-hcd
# $2 = optional argument
#
modprobe_module()
{
  if [ "$1" = "" ]; then return 1; fi
  PRINTK=`cat /proc/sys/kernel/printk`
  echo "0" >/proc/sys/kernel/printk

  KERNEL="`uname -r`"; LSMOD=/tmp/_lsmod
  MODULEDEPS="`cat /lib/modules/$KERNEL/modules.dep | egrep \"$1\\.ko(\\.gz)?:\"`"

  for MODULE in `echo $MODULEDEPS | cut -d ":" -f 2-` `echo $MODULEDEPS | cut -d ":" -f 1`; do
     TMPMOD="/tmp/`basename $MODULE .gz`";
     # if the module is not loaded already
     if [ "`cat $LSMOD 2>/dev/null | egrep \"^$TMPMOD\\\$\"`" = "" ]; then
        gunzip -c $MODULE 2>/dev/null >$TMPMOD
        if [ "$?" -ne 0 ]; then cp $MODULE $TMPMOD; fi # can't gunzip? copy
        insmod $TMPMOD $2 >/dev/null 2>/dev/null; err=$?
        if [ "$err" -eq 0 ]; then echo $TMPMOD >>$LSMOD; fi # module log
        rm $TMPMOD
     fi
  done

  echo "$PRINTK" >/proc/sys/kernel/printk
  if [ "$err" -ne 0 ]; then echolog "error inserting module $1 ($err)"; fi
  return $err
}

# Mount device $1 to $2
# $1 = /dev device to mount, eg. /dev/hda1
# $2 = mountpoint, eg. /mnt/hda1
# $3 = mount options, for example "loop", "ro", or "remount,rw"
#
mount_device()
{
  mkdir -p $2
  if [ "$3" != "" ]; then OPTIONS="-o $3"; else OPTIONS=""; fi

  PRINTK=`cat /proc/sys/kernel/printk`
  echo "0" >/proc/sys/kernel/printk

  mount -t auto $1 $2 $OPTIONS >/dev/null 2>/dev/null
  err=$?

  if [ "$err" -ne 0 ]; then rmdir $2 2>/dev/null; fi
  echo "$PRINTK" >/proc/sys/kernel/printk
  return $err
}

# ===========================================================
# live module functions
# ===========================================================

# Create module
# call mksquashfs with apropriate arguments
# $1 = directory which will be compressed to squashfs module
# $2 = output .mo file
# $3 = optional -keep-as-directory argument
#
create_module()
{
   mksquashfs "$1" "$2" $3 >/dev/null
   if [ $? -ne 0 ]; then return 1; fi
   chmod oga-x "$2" # remove execute attrib
}

# Mount .mo module to destination directory
# $1 = path to .mo livecd compressed module
# $2 = destination folder
#
mount_module()
{
   mount -t squashfs -o loop,ro "$1" "$2"
   echo "$1 $2" >>/tmp/_mounts
}

# Insert a directory tree $2 to an union specified by $1
# Top-level read-write branch is specified by it's index 0
# $1 = union absolute path (starting with /)
# $2 = path to data directory
#
union_insert_dir()
{
   unionctl "$1" --add --after 0 --mode ro "$2"
}

# List all modules in all directories (base, modules, optional)
# and filter out unneeded optional modules (not specified by load= kernel parameter)
# $1 = root directory of mounted DATAdir
#
list_modules()
{
   LOAD="`cmdline_value load`"
   ls -A1d $1/*.mo $1/*/*.mo 2>/dev/null | while read LINE; do
      MODNAME="`basename $LINE .mo`"
      if [ "$LOAD" != "*" -a "`echo $LINE | grep optional`" != "" -a "`echo $LOAD | egrep \"(^|,)$MODNAME(\\\$|,)\"`" = "" ]; then continue
        else echo $LINE; fi
   done
}

# Insert one single .mo module to the union
# $1 = union absolute path (starting with /)
# $2 = module.mo full path
# $3 = destination folder, where images will be mounted to
#
union_insert_module()
{
   TARGET="$3/`basename $2`"
   while [ -e $TARGET ]; do TARGET=$TARGET.X; done
   mkdir -p $TARGET
   mount_module $2 $TARGET
   if [ $? -ne 0 ]; then echo "can't read module data. corrupted download?" >&2; return 1; fi
   union_insert_dir $1 $TARGET
   if [ $? -ne 0 ]; then echo "can't insert module to union" >&2; return 1; fi
   basename $TARGET
}

# Insert all .mo modules, in $2 directory and subdirectories, to the union
# $1 = union absolute path (starting with /)
# $2 = LiveCD data dir (with directories /base, /modules, etc.)
# $3 = destination folder, where images will be mounted to
#
union_insert_modules()
{
   list_modules $2 | while read MODULE; do
      echo -n " -> "
      union_insert_module $1 $MODULE $3
   done
}

# Copy LiveCD modules to RAM directory
# will copy only /boot, and module files from $1
# $1 = data directory
# $2 = target directory in RAM
#
copy_to_ram()
{
   cp -R "$1/boot" "$2"
   list_modules "$1" | while read MODULE; do
      cp "$MODULE" "$2"
      if [ "$?" -ne 0 ]; then fatal "can't copy to RAM, not enough memory?"; fi
   done
}

# Copy content of "rootcopy" directory on the CD to $2 (union, usually)
# $1 = source
# $2 = destination
#
copy_rootchanges()
{
   cp -a $1/rootcopy/* $2 2>/dev/null # could be empty
}

# ===========================================================
# discovery functions
# ===========================================================

# List all CD-ROMs
# by using /proc entries
#
list_cdrom_devices()
{
   if [ "`cmdline_parameter nocd`" != "" ]; then return 1; fi
   for CDDEVICE in `cat /proc/sys/dev/cdrom/info | head -n 3 | tail -n 1 | cut -d ":" -f 2`; do
      echo "/dev/$CDDEVICE"
   done
}

# List all partition devices
# take list of all partitions and output unique disks.
# Return empty result when nohd parameter was given.
#
list_partition_devices()
{
   if [ "`cmdline_parameter nohd`" != "" ]; then return 1; fi
   cat /proc/partitions | grep -v loop | sed -r "s/^[0-9[:space:]]+/\/dev\//" | grep /dev/
}

# List all disk devices
#
list_disk_devices()
{
   list_partition_devices | egrep -v "[0-9]"
}

# List all block devices
#
list_block_devices()
{
   list_cdrom_devices
   list_partition_devices
}

# Try to mount all disks, partitions and cdroms and Find where the LiveCD is.
# If LiveCD found in the device, echo dirname of it's directory,
# and leave the device mounted. Mounting is not ro, but without any argument.
# $1 = directory where devices will be mounted
#
find_live_data_dir()
{
   list_block_devices | while read DEVICE; do
      DIR="/$1/`basename $DEVICE`"
      mount_device $DEVICE $DIR
      if [ $? -ne 0 ]; then continue; fi
      FOUND=`ls -A1d $DIR/livecd.sgn $DIR/*/livecd.sgn 2>/dev/null | head -n 1`
      if [ "$FOUND" = "" ]; then umount $DIR 2>/dev/null; rmdir $DIR 2>/dev/null
      else dirname "$FOUND"; return 1; fi
   done
}

# ===========================================================
# hardware preparation functions
# ===========================================================

# Create block devices to /dev described by /sys entries
#
create_block_devices()
{
   echolog "creating /dev entries for block devices"
   ls -A1d /sys/block/*/dev /sys/block/*/*/dev 2>/dev/null | grep -v loop | while read BLOCK; do
      DEVICE="/dev/`basename \`dirname $BLOCK\``"
      if [ ! -b $DEVICE ]; then
         MINORMAJOR="`head -n 1 $BLOCK | tr ':' ' '`"
         mknod $DEVICE b $MINORMAJOR
      fi
   done
}

# modprobe kernel modules needed for the LiveCD
#
modprobe_essential_modules()
{
   echolog "starting loop device support"
   modprobe_module loop max_loop=255
   echolog "starting cdrom filesystem support"
   modprobe_module isofs
   echolog "starting squashfs support"
   modprobe_module squashfs
   echolog "starting unionfs support"
   modprobe_module unionfs
   echolog "starting vfat support"
   modprobe_module nls_cp437
   modprobe_module nls_iso8859-1
   modprobe_module nls_iso8859-2
   modprobe_module vfat
   echolog "starting ntfs support"
   modprobe_module ntfs
   create_block_devices
}

# modprobe kernel modules needed for USB masstorage devices
#
modprobe_usb_modules()
{
   echolog "starting USB support"
   modprobe_module ehci-hcd
   modprobe_module ohci-hcd
   modprobe_module uhci-hcd
   modprobe_module usb-storage
   create_block_devices
}

# enable/disable CD autoejecting when unmounted
# $1 = 1|0 ... enable|disable
#
cd_autoeject()
{
   echo $1 >/proc/sys/dev/cdrom/autoeject
}

# Disable DMA if nodma boot parameter is present
#
setup_dma()
{
   if [ ! "`cmdline_parameter nodma`" = "" ]; then
      for DEVICE in `list_cdrom_devices` `list_disk_devices`; do
         echolog "setting DMA support off for $DEVICE"
         hdparm -d 0 $DEVICE
      done
   fi
}

# create correct fstab file in $1/etc/fstab and create apropriate
# mount directories in $1
# $1 = root directory (union)
#
activate_fstab()
{
   mkdir -p $1/etc
   FSTAB="$1/etc/fstab"
   echo "tmpfs            /                tmpfs       defaults         0   0" >$FSTAB
   echo "devpts           /dev/pts         devpts      gid=5,mode=620   0   0" >>$FSTAB
   echo "proc             /proc            proc        defaults         0   0" >>$FSTAB

   list_cdrom_devices | while read DEVICE; do
      MOUNTDIR="/mnt/`basename $DEVICE`_cdrom"
      mkdir -p $1/$MOUNTDIR
      echo "$DEVICE $MOUNTDIR iso9660 noauto,users,exec 0 0 $FSTABLLFLAG" >>$FSTAB
   done

   list_partition_devices | while read DEVICE; do
      unset REMOVABLE; DEV="`basename $DEVICE`"; DEV0="`echo $DEV | cut -b 1-3`"
      if [ "0`cat /sys/block/$DEV0/removable`" -ne 0 ]; then
         REMOVABLE="_removable"
      fi

      # skip this device if mountpoint exists
      MOUNTDIR="/mnt/$DEV$REMOVABLE"
      if [ -d "$1/$MOUNTDIR" ]; then continue; fi

      # try to mount the device and unmount it. If OK, we can add it to fstab
      mount_device "$DEVICE" "$1/$MOUNTDIR"
      FS="`cat /proc/mounts | grep $DEVICE | grep $MOUNTDIR | cut -d \" \" -f 3 | head -n 1`"
      umount "$1/$MOUNTDIR" 2>/dev/null
      if [ $? -eq 0 ]; then
         echo "$DEVICE $MOUNTDIR $FS auto,users,suid,dev,exec 0 0 $FSTABLLFLAG" >>$FSTAB
      else # remove empty directory
         rmdir "$1/$MOUNTDIR" 2>/dev/null
      fi
   done

   fdisk -l 2>/dev/null | grep -i "Linux swap" | egrep "^/dev/" \
     | cut -f 1 -d " " | sed -r "s/(.+)/\\1 swap swap defaults 0 0 $FSTABLLFLAG/" >>$FSTAB

   echo "/dev/fd0 /mnt/floppy auto noauto,users,suid,dev,exec 0 0" >>$FSTAB
   mkdir -p $1/mnt/floppy
}
